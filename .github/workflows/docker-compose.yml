name: Deploy Docker Compose Application

on:
  push:
    branches:
      - main  # Trigger the action on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger the action on PRs to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Define the environment (Ubuntu runner in this case)

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (for multi-platform builds, optional)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Cache Docker layers for faster builds (optional)
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 4: Set up Docker (install Docker)
      - name: Set up Docker
        uses: docker/setup-docker@v2
        with:
          docker-version: '20.10.7'  # You can specify a different version if needed

      # Step 5: Log in to Docker Hub (or other container registry if needed)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Set up secrets in GitHub repository settings
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Build and deploy using Docker Compose
      - name: Build and deploy using Docker Compose
        run: |
          # Log in to Docker registry
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

          # Pull the necessary Docker images (if needed)
          docker-compose pull

          # Build the images defined in docker-compose.yml
          docker-compose build

          # Deploy and start the services
          docker-compose up -d  # -d runs the containers in detached mode

      # Step 7: Optionally, perform cleanup or other post-deployment tasks
      - name: Clean up resources
        run: |
          # You can use this step to prune unused Docker images or containers to free up space
          docker system prune -af  # Prune unused containers, networks, and images

      # Optional: Wait for a few seconds to ensure the application is up and running
      - name: Wait for application to start
        run: |
          sleep 10  # Adjust the sleep duration as needed for your application

      # Step 8: Verify the deployment
      - name: Verify Deployment
        run: |
          docker ps  # Check if the containers are running
          curl -f http://localhost:8080  # Make an HTTP request to your app to verify it is up (adjust the port if needed)
